// FIXME: Migrate to explicit fuel

// "Booleans"
val fls = 0;
val tru = 1;

fun assertTru (n [{[Nat] tru}]) [returns Unit] = { () }
fun assertFls (n [{[Nat] fls}]) [returns Unit] = { () }

// Equality on Nats (returns 1 when equal)
val natEq = fixD(
  natEq_ [Nat => Nat => Nat] =>
    fun of (m [Nat]) = { fun of (n [Nat]) = {
      nat_match m {
        case zero =>
          nat_match n {
            case zero => 1
            case succ nn => 0
          }
        case succ mm =>
          nat_match n {
            case zero => 0
            case succ nn => natEq_ mm nn
          }
      }
    } },
  fun of (m [Nat]) = { fun of (n [Nat]) = {
    2
  } }
);

// Examples
val res = assertTru (natEq 0 0);
val res = assertTru (natEq 1 1);
val res = assertTru (natEq 2 2);
val res = assertFls (natEq 0 1);
val res = assertFls (natEq 1 0);
val res = assertFls (natEq 1 2);

// Generic lists
val listOfN = fixD(
  listOfN_ [(Unit => Top) => Nat => List] =>
    fun of (makeElem [Unit => Top]) = { fun of (n [Nat]) = {
      nat_match n {
        case zero => nil
        case succ n => cons (makeElem ()) (listOfN_ makeElem n)
      }
    } },
  fun of (makeElem [Unit => Top]) = { fun of (n [Nat]) = {
    nil
  } }
);

val listOf = fun of (makeElem [Unit => Top]) = {
  listOfN makeElem (choose[Nat])
};

val makeNat = fun of (u [Unit]) = { choose[Nat] };

// HLists
val concat = fixD(
  concat_ [List => List => List] =>
    fun of (xs [List]) = { fun of (ys [List]) = {
      list_match xs {
        case nil => ys
        case cons x xs => cons x (concat_ xs ys)
      }
    } },
  fun of (xs [List]) = { fun of (ys [List]) = { nil } });

val nth = fixD(
  nth_ [Nat => List => Top => Top] =>
    fun of (n [Nat]) = { fun of (xs [List]) = { fun of (default [Top]) = {
      nat_match n {
        case zero =>
          list_match xs {
            case nil => default
            case cons x ys => x
          }
        case succ m =>
          list_match xs {
            case nil => default
            case cons x ys => nth_ m ys default
          }
      }
    } } },
  fun of (n [Nat]) = { fun of (xs [List]) = { fun of (default [Top]) = { default } } });

// val contains = fixD(
//   contains_ [Pi(n:Nat, {[List] listOfN makeNat n} => Nat => Nat)] =>
//     fun of (n [Nat]) = { fun of (xs [{[List] listOfN makeNat n}]) = { fun of (z [Nat]) = {
//       list_match xs {
//         case nil => fls
//         case cons x ys =>
//           // nat_match (natEq x z) {
//           //   case zero =>
//           //     nat_match n {
//           //       case zero => fls
//           //       case succ nn => contains_ nn ys z
//           //     }
//           //   case succ bb => tru
//           // }
//           fls
//       }
//     } } },
//   fun of (n [Nat]) = { fun of (xs [{[List] listOfN makeNat n}]) = { fun of (z [Nat]) = { fls } } });

// Examples
val bs [{[Cons[{ [Nat] 1 }, { [Cons[{ [Nat] 2 }, { [List] nil }]] cons 2 (nil) }]] cons 1 (cons 2 nil)}] = concat (cons 1 nil) (cons 2 nil);

val res [{[Nat] 1}] = nth 0 bs 0;
val res [{[Nat] 2}] = nth 1 bs 0;
val res [{[Nat] 0}] = nth 2 bs 0;

()
