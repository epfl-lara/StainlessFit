fun listOfLength (fuel [Nat]) = {
  fixD(
    listOfLength [List => List] => fun of (xs [List]) = { list_match xs {
      case nil => nil
      case cons x ys => cons (choose[Nat]) (listOfLength ys)
    } },
    fun of (n [List]) = { nil }
  )(fuel)
}

fun head (xs [List]) = {
  list_match xs {
    case nil => nil
    case cons x ys => x
  }
}

val xs = cons true (cons true nil);
val res [Nat] = head (listOfLength 3 xs);
()
