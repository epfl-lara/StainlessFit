fun listOfN (fuel [Nat]) = {
  fixD(
    listOfN_ [Nat => List] =>
      fun of (n1 [Nat]) = {
        nat_match n1 {
          case zero => nil
          case succ nn => cons 0 (listOfN_ nn)
        }
      },
    fun of (n2 [Nat]) = {
      nil
    }
  )(fuel)
}

fun foo (k [Nat]) [returns {[List] listOfN (choose[Nat]) k}] = {
  listOfN (choose[Nat]) k
}

fun bar (k [Nat]) (xs [{[List] listOfN (succ k) k}]) [returns Nat] = {
  0
}

()
